<launch>

    <!-- Transformation Configuration ... Setting Up the Relationships Between Coordinate Frames --> 
    <!-- Values for base_link_to_laser and imu_broadcaster will change when lidar and zed are moved -->
    <node pkg="tf" type="static_transform_publisher" name="base_link_to_laser" args="0.28 0 0.1 0 0 0 base_link laser 30" />
    <node pkg="tf" type="static_transform_publisher" name="imu_broadcaster" args="0.28 0 0.44 0 0 0 base_link imu 30" />
    <node pkg="tf" type="static_transform_publisher" name="base_link_broadcaster" args="0 0 0.15 0 0 0 base_footprint base_link 30" />
    <!-- odom to base_footprint transform will be provided by the robot_pose_ekf node -->
    <!-- map to odom will be provided by the AMCL -->
    <node pkg="tf" type="static_transform_publisher" name="map_to_odom" args="0 0 0 0 0 0 map odom 30" />

    <!-- Lidar Data Publisher Using RPLIDAR from Slamtec -->
    <!-- Used for obstacle avoidance and can be used for mapping --> 
    <!-- Publish: /scan -->
    <node name="rplidarNode"          pkg="rplidar_ros"  type="rplidarNode" output="screen">
        <param name="serial_port"         type="string" value="/dev/ttyUSB0"/>
        <param name="serial_baudrate"     type="int"    value="256000"/> <!--A3 -->
        <param name="frame_id"            type="string" value="laser"/>
        <param name="inverted"            type="bool"   value="false"/>
        <param name="angle_compensate"    type="bool"   value="true"/>
    </node>  

    <!-- IMU Data Publisher Using the ZED IMU Sensor -->
    <!-- Publish: /imu/data -->
    <include file="$(find zed_wrapper)/launch/zed2i.launch"/>

    <!-- This is going to be the Wheel Odometry Publisher once Wheel encoders are figured out -->
    <!-- Currently, this program fakes wheel encoder data using cmd_vel and imu data -->
    <node pkg="navigator" type="odom_pub" name="odom_pub" output="screen"/>

    <!-- Extended Kalman Filter from robot_pose_ekf Node-->
    <!-- Subscribe: /odom, /imu_data, /vo -->
    <!-- Publish: /robot_pose_ekf/odom_combined -->
    <remap from="odom" to="odom_data_quat" />
    <remap from="imu_data" to="/zed2i/zed_node/imu/data" />
    <node pkg="robot_pose_ekf" type="robot_pose_ekf" name="robot_pose_ekf">
        <param name="output_frame" value="odom"/>
        <param name="base_footprint_frame" value="base_footprint"/>
        <param name="freq" value="30.0"/>
        <param name="sensor_timeout" value="1.0"/>
        <param name="odom_used" value="true"/>
        <param name="imu_used" value="false"/>
        <param name="vo_used" value="false"/>
        <param name="gps_used" value="false"/>
        <param name="debug" value="false"/>
        <param name="self_diagnose" value="false"/>
    </node>

    <!-- Map File -->
    <arg name="map_file" default="/home/central-station/senior_design_ws/maps/blank_map_complete.yaml"/>

    <!-- Map Server -->
    <!-- Publish: /map, /map_metadata -->
    <node pkg="map_server" name="map_server" type="map_server" args="$(arg map_file)" />

    <!-- Initial Pose and Goal Publisher -->
    <!-- Publish: /initialpose, /move_base_simple/goal -->
    <node pkg="rviz" type="rviz" name="rviz">
    </node> 

    <!-- Subscribe: /initialpose, /move_base_simple/goal -->
    <!-- Publish: /initial_2d, /goal_2d --> 
    <node pkg="navigator" type="rviz_click_to_2d" name="rviz_click_to_2d">
    </node>   

    <!-- Driver Node -->  
    <!-- Subscribe: /cmd_vel -->
    <!-- Publish: /command_du_one -->
    <node pkg="motion_control" name="driver" type="driver.py" output="screen"/>	

    <!-- Motor Encoder Nodes -->  
    <!-- Subscribe: /command_du_one -->
    <node name="roboteq1_node" pkg="motion_control" type="motor_command1.py" />
    <node name="roboteq2_node" pkg="motion_control" type="motor_command2.py" />

    <!-- Add AMCL example for omni drive robots for Localization -->
    <!-- Subscribe: /scan, /tf, /initialpose, /map -->
    <!-- Publish: /amcl_pose, /particlecloud, /tf -->
    <include file="$(find amcl)/examples/amcl_omni.launch"/>

    <!-- Move Base Node -->
    <!-- Subscribe: /move_base_simple/goal -->
    <!-- Publish: /cmd_vel -->
    <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
        <rosparam file="$(find omnibot_2dnav)/params/costmap_common_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find omnibot_2dnav)/params/costmap_common_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find omnibot_2dnav)/params/local_costmap_params.yaml" command="load" ns="local_costmap" />
        <rosparam file="$(find omnibot_2dnav)/params/global_costmap_params.yaml" command="load" ns="global_costmap" /> 
        <rosparam file="$(find omnibot_2dnav)/params/base_local_planner_params.yaml" command="load" />
        <rosparam file="$(find omnibot_2dnav)/params/move_base_params.yaml" command="load" />
    </node>

</launch>